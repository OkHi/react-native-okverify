{"version":3,"sources":["index.tsx"],"names":["OkVerify","NativeModules","ReactNativeOkverify","init","notification","Platform","OS","isValid","OkHiException","code","BAD_REQUEST_CODE","message","startVerification","configuration","Promise","resolve","reject","auth","location","user","phone","id","lat","lon","branchId","getBranchId","clientKey","getClientKey","mode","getContext","getMode","UNSUPPORTED_PLATFORM_CODE","UNSUPPORTED_PLATFORM_MESSAGE","UNAUTHORIZED_CODE","start","locationId","then","catch","error","UNKNOWN_ERROR_CODE","stopVerification","stop","canStartVerification","requestServices","all","result","includes"],"mappings":"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","sourcesContent":["import { NativeModules, Platform } from 'react-native';\nimport {\n  OkHiException,\n  OkHiUser,\n  isGooglePlayServicesAvailable,\n  isLocationPermissionGranted,\n  isLocationServicesEnabled,\n  requestEnableGooglePlayServices,\n  requestEnableLocationServices,\n  requestLocationPermission,\n} from '@okhi/react-native-core';\nimport { validateNotification } from './Util';\nimport type { OkHiLocation } from '@okhi/react-native-core';\nimport type { OkVerifyType, OkHiNotification } from './types';\n\nexport { OkHiNotification } from './types';\n\n/**\n * @ignore\n */\nconst OkVerify: OkVerifyType = NativeModules.ReactNativeOkverify;\n\n/**\n * The init method performs crucial checks and verification signal uploads that are necessary for the library to work effectively.\n * The init method takes in an optional, but highly recommended notification configuration that'll be used to start an Android foreground service.\n * The service will attempt to immediately upload verification signals as soon as they occur.\n */\nexport const init = (notification?: OkHiNotification) => {\n  if (Platform.OS !== 'android') {\n    return;\n  }\n  if (notification) {\n    const isValid = validateNotification(notification);\n    if (!isValid) {\n      throw new OkHiException({\n        code: OkHiException.BAD_REQUEST_CODE,\n        message: 'invalid notification structure',\n      });\n    }\n    OkVerify.init(notification);\n  } else {\n    OkVerify.init({});\n  }\n};\n\n/**\n * Attempts to start the address verification process.\n * @param configuration The OkCollectSuccessResponse object once an address has been successfully created. (https://okhi.github.io/react-native-okcollect/interfaces/okcollectsuccessresponse.html)\n * @returns {Promise<string>} Promise that resolves with the location id.\n */\nexport const startVerification = (configuration: {\n  location: OkHiLocation;\n  user: OkHiUser;\n  auth: any;\n}): Promise<string> => {\n  return new Promise((resolve, reject) => {\n    const { auth, location, user } = configuration;\n    const { phone } = user;\n    const { id, lat, lon } = location;\n    const branchId = auth.getBranchId();\n    const clientKey = auth.getClientKey();\n    const mode = auth.getContext().getMode();\n\n    if (Platform.OS !== 'android') {\n      return reject(\n        new OkHiException({\n          code: OkHiException.UNSUPPORTED_PLATFORM_CODE,\n          message: OkHiException.UNSUPPORTED_PLATFORM_MESSAGE,\n        })\n      );\n    }\n\n    if (typeof id !== 'string') {\n      return reject(\n        new OkHiException({\n          code: OkHiException.BAD_REQUEST_CODE,\n          message: 'Missing id from location object',\n        })\n      );\n    }\n    if (typeof lat !== 'number' || typeof lon !== 'number') {\n      return reject(\n        new OkHiException({\n          code: OkHiException.BAD_REQUEST_CODE,\n          message: 'Missing coords from location object',\n        })\n      );\n    }\n    if (typeof phone !== 'string') {\n      return reject(\n        new OkHiException({\n          code: OkHiException.BAD_REQUEST_CODE,\n          message: 'Missing phone from user object',\n        })\n      );\n    }\n    if (typeof branchId !== 'string' || typeof clientKey !== 'string') {\n      return reject(\n        new OkHiException({\n          code: OkHiException.UNAUTHORIZED_CODE,\n          message: 'Missing credentials from authentication object',\n        })\n      );\n    }\n    OkVerify.start({\n      branchId,\n      clientKey,\n      lat,\n      lon,\n      phone,\n      mode,\n      locationId: id,\n    })\n      .then(resolve)\n      .catch((error: OkHiException) =>\n        reject(\n          new OkHiException({\n            code: error.code || OkHiException.UNKNOWN_ERROR_CODE,\n            message: error.message,\n          })\n        )\n      );\n  });\n};\n\n/**\n * Attemps to stop the verification process of particular location.\n * @param {string} locationId\n * @returns {Promise<string>} The locaiton id.\n */\nexport const stopVerification = (locationId: string) => {\n  if (Platform.OS !== 'android') {\n    return Promise.resolve(locationId);\n  }\n  return OkVerify.stop(locationId);\n};\n\n/**\n * Checks whether all necessary permissions and services are available in order to start the verification process.\n * @param {Object} configuration Object that determines whether or not to request these permissions and services from the user.\n * @param {boolean} configuration.requestServices Flag that determines whether to request the services from the user.\n * @returns {Promise<boolean>} A promise that resolves to a boolean value indicating whether or not all conditions are met to star the verification process.\n */\nexport const canStartVerification = (configuration: {\n  requestServices: boolean;\n}): Promise<boolean> => {\n  return new Promise(async (resolve, reject) => {\n    if (Platform.OS !== 'android') {\n      reject(\n        new OkHiException({\n          code: OkHiException.UNSUPPORTED_PLATFORM_CODE,\n          message: OkHiException.UNSUPPORTED_PLATFORM_MESSAGE,\n        })\n      );\n    }\n    const { requestServices } = configuration;\n    try {\n      if (requestServices) {\n        await requestEnableGooglePlayServices();\n        await requestEnableLocationServices();\n        await requestLocationPermission();\n      }\n      Promise.all([\n        isGooglePlayServicesAvailable(),\n        isLocationPermissionGranted(),\n        isLocationServicesEnabled(),\n      ])\n        .then((result) => {\n          resolve(!result.includes(false));\n        })\n        .catch(reject);\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\n"]}